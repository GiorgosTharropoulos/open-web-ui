name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Deploy to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "compose.yaml,Caddyfile,.env.example"
          target: ${{ secrets.DEPLOY_PATH }}
          strip_components: 0
          timeout: 60s

      - name: Create .env file on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # Create .env file from template and secrets
            if [ -f .env ]; then
              cp .env .env.backup
            fi

            # Create .env file without echoing contents
            cat > .env << EOF
            # Generated by GitHub Actions - $(date)
            ZAI_API_KEY=${{ secrets.ZAI_API_KEY }}
            WEBUI_SECRET_KEY=${{ secrets.WEBUI_SECRET_KEY }}
            WEBUI_URL=${{ secrets.WEBUI_URL }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            TLS_CERT_PATH=${{ secrets.TLS_CERT_PATH }}
            TLS_KEY_PATH=${{ secrets.TLS_KEY_PATH }}
            EOF

            echo "✅ .env file created successfully"

      - name: Deploy and restart services
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # Stop existing services
            echo "Stopping existing services..."
            docker compose down || true

            # Pull latest images
            echo "Pulling latest images..."
            docker compose pull

            # Start services
            echo "Starting services..."
            docker compose up -d

            # Wait a moment for services to start
            sleep 10

            # Show service status (sanitized)
            echo "Service status:"
            docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Wait for services to be fully ready
            sleep 30

            # Check if services are running
            if docker compose ps | grep -q "Up"; then
              echo "✅ Services are running successfully!"

              # Test HTTP connectivity to OpenWebUI
              if curl -f -s http://localhost:8080 > /dev/null || curl -f -s https://${{ secrets.DOMAIN_NAME }} > /dev/null; then
                echo "✅ OpenWebUI is responding!"
              else
                echo "⚠️ OpenWebUI might not be fully ready yet, but this is normal on first startup"
              fi
            else
              echo "❌ Some services failed to start"
              echo "Check logs manually on the server: docker compose logs"
              exit 1
            fi